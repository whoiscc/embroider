with
print = func(a) lang print ()
repr = func(a) lang repr ()
Instant = {
    now: func() lang instant_now ()
    elapsed: func(a) lang instant_elapsed ()
}
some = func(value) { Some: value }
none = {None: ()}

tree = func(item, depth)
    capture tree
    match depth > 0
        | {True} with
            item2 = item + item
            left = tree(item2 - 1, depth - 1)
            right = tree(item2, depth - 1)
            ({ item: item, depth: depth, left: some(left), right: some(right) })
        | {False}
            {item: item, depth: depth, left: none, right: none} (

with
check = func(node)
    capture check
    match node.left
    | {None} node.item
    | {Some} node.item + check(node.left.Some) - check(node.right.Some) (

with
min_depth = 4
max_depth = 14
stretch_depth = max_depth + 1

start = Instant.now() (
print("stretch tree of depth " + repr(stretch_depth))
print("check: " + repr(check(tree(0, stretch_depth))))

with
long_lived_tree = tree(0, max_depth)
iterations = 1
d = 0 (
loop match d < max_depth | {False} break | {True} (
    iterations mut iterations * 2
    d mut d + 1
)

with depth = min_depth (
loop match depth < stretch_depth | {False} break | {True} with
    check_sum = 0
    i = 1 (
    loop match i <= iterations | {False} break | {True} (
        check_sum mut check_sum + check(tree(i, depth)) + check(tree(-i, depth))
        i mut i + 1
    )

    print("num trees: " + repr(iterations * 2))
    print("depth: " + repr(depth))
    print("check: " + repr(check_sum))

    iterations mut iterations / 4
    depth mut depth + 2
)

print("long lived tree of depth: " + repr(max_depth))
print("check: " + repr(check(long_lived_tree)))
print("elapsed: " + repr(Instant.elapsed(start)))
)))))